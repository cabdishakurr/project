import { FirebaseApp } from '@nativescript/firebase-core';
import { ActionCodeInfoOperation } from './common';
import { ActionCodeInfo, IUserCredential, IActionCodeSettings, IAuth, IAuthCredential, IAuthSettings, IAuthTokenResult, IOAuthCredential, IPhoneAuthCredential, IUser, IUserInfo, IUserMetadata, OAuthCredentialOptions, UserProfileChangeRequest, IOAuthProvider } from '.';
export { ActionCodeInfoOperation };
export declare class UserMetadata implements IUserMetadata {
    _native: com.google.firebase.auth.FirebaseUserMetadata;
    static fromNative(metadata: com.google.firebase.auth.FirebaseUserMetadata): UserMetadata;
    get native(): com.google.firebase.auth.FirebaseUserMetadata;
    get android(): com.google.firebase.auth.FirebaseUserMetadata;
    get creationDate(): Date;
    get lastSignInDate(): Date;
    toJSON(): {
        creationDate: Date;
        lastSignInDate: Date;
    };
}
export declare class UserInfo implements IUserInfo {
    _native: com.google.firebase.auth.UserInfo;
    static fromNative(info: com.google.firebase.auth.UserInfo): UserInfo;
    get native(): com.google.firebase.auth.UserInfo;
    get android(): com.google.firebase.auth.UserInfo;
    get uid(): string;
    get displayName(): string;
    get email(): string;
    get phoneNumber(): string;
    get photoURL(): string;
    get providerId(): string;
    toJSON(): {
        displayName: string;
        email: string;
        uid: string;
        phoneNumber: string;
        providerId: string;
        photoURL: string;
    };
}
export declare class User implements IUser {
    _native: com.google.firebase.auth.FirebaseUser;
    get native(): com.google.firebase.auth.FirebaseUser;
    get android(): com.google.firebase.auth.FirebaseUser;
    static fromNative(user: com.google.firebase.auth.FirebaseUser): User;
    get displayName(): string;
    get anonymous(): boolean;
    get emailVerified(): boolean;
    get email(): string;
    get uid(): string;
    get phoneNumber(): string;
    get providerId(): string;
    get photoURL(): string;
    get metadata(): UserMetadata;
    get providerData(): UserInfo[];
    toJSON(): {
        displayName: string;
        anonymous: boolean;
        emailVerified: boolean;
        email: string;
        uid: string;
        phoneNumber: string;
        providerId: string;
        photoURL: string;
        metadata: UserMetadata;
        providerData: UserInfo[];
    };
    delete(): Promise<void>;
    getIdToken(forceRefresh?: boolean): Promise<string>;
    getIdTokenResult(forceRefresh?: boolean): Promise<AuthTokenResult>;
    linkWithCredential(credential: AuthCredential): Promise<IUserCredential>;
    reauthenticateWithProvider(provider: OAuthProvider): Promise<IUserCredential>;
    reauthenticateWithCredential(credential: AuthCredential): Promise<IUserCredential>;
    reload(): Promise<void>;
    sendEmailVerification(actionCodeSettings?: ActionCodeSettings): Promise<void>;
    unlink(providerId: string): Promise<User>;
    updateEmail(email: string): Promise<void>;
    updatePassword(password: string): Promise<void>;
    updatePhoneNumber(credential: PhoneAuthCredential): Promise<void>;
    updateProfile(profile: UserProfileChangeRequest): Promise<void>;
    verifyBeforeUpdateEmail(email: string, actionCodeSettings?: ActionCodeSettings): Promise<void>;
}
export declare class AuthSettings implements IAuthSettings {
    _native: com.google.firebase.auth.FirebaseAuthSettings;
    static fromNative(settings: com.google.firebase.auth.FirebaseAuthSettings): AuthSettings;
    get native(): com.google.firebase.auth.FirebaseAuthSettings;
    get android(): com.google.firebase.auth.FirebaseAuthSettings;
    _appVerificationDisabledForTesting: boolean;
    set appVerificationDisabledForTesting(value: boolean);
    get appVerificationDisabledForTesting(): boolean;
}
export declare class ActionCodeSettings implements IActionCodeSettings {
    _native: com.google.firebase.auth.ActionCodeSettings.Builder;
    constructor();
    get native(): com.google.firebase.auth.ActionCodeSettings;
    get android(): com.google.firebase.auth.ActionCodeSettings;
    url: string;
    androidInstallIfNotAvailable: boolean;
    androidMinimumVersion: string;
    androidPackageName: string;
    dynamicLinkDomain: string;
    handleCodeInApp: boolean;
    iOSBundleId: string;
}
export declare class AuthCredential implements IAuthCredential {
    protected _native: com.google.firebase.auth.AuthCredential;
    static fromNative(credential: com.google.firebase.auth.AuthCredential): AuthCredential;
    get native(): com.google.firebase.auth.AuthCredential;
    get android(): com.google.firebase.auth.AuthCredential;
    get provider(): string;
    get signInMethod(): string;
}
export declare class EmailAuthProvider {
    static credential(email: string, password: string): AuthCredential;
    static credentialWithLink(email: string, link: string): AuthCredential;
}
export declare class PhoneAuthProvider {
    _native: com.google.firebase.auth.PhoneAuthOptions.Builder;
    get native(): com.google.firebase.auth.PhoneAuthOptions.Builder;
    get android(): com.google.firebase.auth.PhoneAuthOptions.Builder;
    static provider(auth?: Auth): PhoneAuthProvider;
    credential(verificationId: string, verificationCode: string): AuthCredential;
    verifyPhoneNumber(phoneNumber: string): Promise<string>;
}
export declare class AppleAuthProvider {
    static credential(idToken: string, nonce: string): any;
}
export declare class FacebookAuthProvider {
    static credential(accessToken: string): AuthCredential;
}
export declare class GithubAuthProvider {
    static credential(token: string): AuthCredential;
}
export declare class GoogleAuthProvider {
    static credential(idToken: string, accessToken: string): AuthCredential;
}
export declare class OAuthCredential extends AuthCredential implements IOAuthCredential {
    protected _native: com.google.firebase.auth.OAuthCredential;
    static fromNative(credential: com.google.firebase.auth.OAuthCredential): OAuthCredential;
    get native(): com.google.firebase.auth.OAuthCredential;
    get android(): com.google.firebase.auth.OAuthCredential;
    get idToken(): string;
    get accessToken(): string;
    get secret(): string;
}
export declare class OAuthProvider implements IOAuthProvider {
    _providerId: string;
    _customProvider: boolean;
    _builder: com.google.firebase.auth.OAuthProvider.Builder;
    constructor(providerId: string);
    get _isCustomProvider(): boolean;
    addCustomParameter(key: string, value: string): void;
    setScopes(scopes: string[]): void;
    credential(optionsOrIdToken: OAuthCredentialOptions | string | null, accessToken?: string): OAuthCredential;
}
export declare class TwitterAuthProvider {
    static credential(token: string, secret: string): AuthCredential;
}
export declare class PhoneAuthCredential extends AuthCredential implements IPhoneAuthCredential {
    protected _native: com.google.firebase.auth.PhoneAuthCredential;
    static fromNative(credential: com.google.firebase.auth.PhoneAuthCredential): PhoneAuthCredential;
    get native(): com.google.firebase.auth.PhoneAuthCredential;
    get android(): com.google.firebase.auth.PhoneAuthCredential;
}
export declare class AuthTokenResult implements IAuthTokenResult {
    _native: com.google.firebase.auth.GetTokenResult;
    static fromNative(tokenResult: com.google.firebase.auth.GetTokenResult): AuthTokenResult;
    get native(): com.google.firebase.auth.GetTokenResult;
    get android(): com.google.firebase.auth.GetTokenResult;
    get authDate(): Date;
    get claims(): any;
    get expirationDate(): Date;
    get issuedAtDate(): Date;
    get signInProvider(): string;
    get token(): string;
}
export declare class Auth implements IAuth {
    _native: com.google.firebase.auth.FirebaseAuth;
    constructor(app?: FirebaseApp);
    useEmulator(host: string, port: number): void;
    fetchSignInMethodsForEmail(email: string): Promise<string[]>;
    isSignInWithEmailLink(emailLink: string): boolean;
    _authStateChangeListeners: Map<any, any>;
    addAuthStateChangeListener(listener: (user: User) => void): void;
    removeAuthStateChangeListener(listener: (user: User) => void): void;
    _idTokenChangeListeners: Map<any, any>;
    addIdTokenChangeListener(listener: (user: User) => void): void;
    removeIdTokenChangListener(listener: (user: User) => void): void;
    sendPasswordResetEmail(email: string, actionCodeSettings?: ActionCodeSettings): Promise<void>;
    sendSignInLinkToEmail(email: string, actionCodeSettings?: ActionCodeSettings): Promise<void>;
    signInAnonymously(): Promise<IUserCredential>;
    signInWithProvider(provider: OAuthProvider): Promise<IUserCredential>;
    getProviderCredential(provider: OAuthProvider): Promise<OAuthCredential>;
    signInWithCredential(credential: AuthCredential): Promise<IUserCredential>;
    signInWithCustomToken(customToken: string): Promise<IUserCredential>;
    signInWithEmailLink(email: string, emailLink: string): Promise<IUserCredential>;
    useUserAccessGroup(userAccessGroup: string): Promise<void>;
    verifyPasswordResetCode(code: string): Promise<string>;
    createUserWithEmailAndPassword(email: string, password: string): Promise<IUserCredential>;
    confirmPasswordReset(code: string, newPassword: string): Promise<void>;
    checkActionCode(code: string): Promise<ActionCodeInfo>;
    applyActionCode(code: string): Promise<void>;
    signInWithEmailAndPassword(email: string, password: string): Promise<IUserCredential>;
    signOut(): Promise<boolean>;
    get native(): com.google.firebase.auth.FirebaseAuth;
    get android(): com.google.firebase.auth.FirebaseAuth;
    _app: FirebaseApp;
    get app(): FirebaseApp;
    get currentUser(): User;
    get languageCode(): string;
    set languageCode(code: string);
    _settings: AuthSettings;
    get settings(): AuthSettings;
    get tenantId(): string;
    set tenantId(id: string);
}
